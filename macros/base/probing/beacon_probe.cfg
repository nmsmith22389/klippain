# This file is used as an interface to activate/deactivate every probe type
# depending of the needs:
#  - Beacon: need to be at a correct nozzle temperature to avoid burning the PEI when used

[gcode_macro ACTIVATE_PROBE]
description: Put the machine in a state able to probe
variable_temperature: 0     # user's original extruder target
variable_is_active: False
gcode:
    # Gather inputs
    # Use the user-defined beacon_max_probing_temp if present; otherwise fall back to Beacon's contact limit
    {% set beacon_max_temp = printer["gcode_macro _USER_VARIABLES"].beacon_max_probing_temp|default(printer.beacon.contact_max_hotend_temperature)|float %}
    {% set home_before = printer["gcode_macro _USER_VARIABLES"].home_before_probe|default(False)|bool %}
    {% set beacon_home_method = printer.beacon.home_method_when_homed|default("proximity")|string %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    # Mark probe as active & store user temp target
    SET_GCODE_VARIABLE MACRO=ACTIVATE_PROBE VARIABLE=is_active VALUE=True
    SET_GCODE_VARIABLE MACRO=ACTIVATE_PROBE VARIABLE=temperature VALUE={TARGET_TEMP}

    SAVE_GCODE_STATE NAME=BEFORE_BEACON_ACTION

    # Temperature guard (uses Beacon's own limit)
    {% if TARGET_TEMP > beacon_max_temp %}
        { action_respond_info("Lowering nozzle target from %.1f °C to Beacon limit %.1f °C"
            % (TARGET_TEMP, beacon_max_temp)) }
        M106 S255                    # full fan to cool faster
        M109 S{beacon_max_temp}      # block until temp reaches safe limit
        M106 S0
    {% elif ACTUAL_TEMP > beacon_max_temp + 3 %}
        M106 S255
        TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={beacon_max_temp}
        M106 S0
    {% endif %}

    # Optionally home Z before probing  (user flag)
    {% if home_before %}
        G28 Z METHOD={{ beacon_home_method|upper }}
    {% endif %}

[gcode_macro DEACTIVATE_PROBE]
description: Revert the machine to a normal state after probing
gcode:
    # Pull user configuration/macro variables
    {% set beacon_deactivation_zhop = printer["gcode_macro _USER_VARIABLES"].beacon_deactivation_zhop|default(2)|float %}
    {% set z_drop_speed = (printer["gcode_macro _USER_VARIABLES"].z_drop_speed|default(10)) * 60 %}
    {% set home_after = printer["gcode_macro _USER_VARIABLES"].home_after_probe|default(False)|bool %}
    {% set beacon_home_method = printer.beacon.home_method_when_homed|default("proximity")|string %}

    # Optional post-home (user flag)
    {% if home_after %}
        G28 Z METHOD={{ beacon_home_method|upper }}
    {% endif %}

    # Safe Z-hop so reheating doesn't scorch the PEI
    {% set z_safe = printer.toolhead.position.z + beacon_deactivation_zhop %}
    {% if z_safe > printer.toolhead.axis_maximum.z %}
        {% set z_safe = printer.toolhead.axis_maximum.z %}
    {% endif %}
    G90
    G1 Z{z_safe} F{z_drop_speed}

    # Restore user's original nozzle temperature
    {% set restore = printer["gcode_macro ACTIVATE_PROBE"].temperature %}
    M109 S{restore}

    # Restore G-code state & clear active flag
    RESTORE_GCODE_STATE NAME=BEFORE_BEACON_ACTION
    SET_GCODE_VARIABLE MACRO=ACTIVATE_PROBE VARIABLE=is_active VALUE=False
